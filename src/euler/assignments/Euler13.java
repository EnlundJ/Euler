package euler.assignments;

import java.math.BigInteger;

//Solved in Excel
public class Euler13 {
	private static BigInteger[] numbers = new BigInteger[100];
	private static BigInteger sum = BigInteger.valueOf(0);
	private static String input
	
	public static void run() {
		System.out.println("Euler13:");
		for (int i = 0; i < 4999; i += 51)
			numbers[(i) / 51] = BigInteger.valueOf(Long.valueOf(input.substring(i, i + 50)));
		for (BigInteger number : numbers)
			sum = sum.add(number);
		System.out.println(sum);
	}
}