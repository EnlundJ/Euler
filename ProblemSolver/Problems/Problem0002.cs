using System.Threading.Tasks;
using EulerDb.Entities;

namespace ProblemSolver.Problems
{
    /// <summary>
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class Problem0002 : IProblem
    {
        public static Task<string> Run(Problem0002Config config)
        {
            long f1 = 1;
            long f2 = 2;
            long f3;
            long sum = 2;
            while (f1 + f2 <= config.MaxValue)
            {
                f3 = f1 + f2;
                f1 = f2;
                f2 = f3;
                if (f3 % 2 == 0)
                    sum += f3;
            }

            return Task.FromResult(sum.ToString());
        }

        public Task<string> Run(Test test)
        {
            Problem0002Config config = test.GetParameters<Problem0002Config>();

            long f1 = 1;
            long f2 = 2;
            long f3;
            long sum = 2;
            while (f1 + f2 <= config.MaxValue)
            {
                f3 = f1 + f2;
                f1 = f2;
                f2 = f3;
                if (f3 % 2 == 0)
                    sum += f3;
            }

            return Task.FromResult(sum.ToString());
        }
    }

    public class Problem0002Config : IProblemParameters
    {
        public long MaxValue { get; set; }
    }
}
